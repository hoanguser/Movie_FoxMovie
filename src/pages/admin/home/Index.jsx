import React, { useState } from 'react';
import { userService } from '../../../service/userService';
import { Table, Modal, Form, Input, Button, Tag, Space } from "antd";
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { notyf } from '../../../util/notyf';

const AdminHomePage = () => {
  const qc = useQueryClient();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isEdit, setIsEdit] = useState(false);
  const [editingUser, setEditingUser] = useState(null);
  const [form] = Form.useForm();

  // L·∫•y danh s√°ch ng∆∞·ªùi d√πng
  const { data } = useQuery({
    queryKey: ["listUser"],
    queryFn: async () => await userService.getListUser(),
  });

  // X√≥a user
  const deleteMutation = useMutation({
    mutationFn: async (taiKhoan) => {
      try {
        const res = await userService.deleteUser(taiKhoan);
        notyf.success("X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng");
        return res;
      } catch (error) {
        const errMsg = error.response?.data?.content || "C√≥ l·ªói x·∫£y ra!";
        notyf.error(errMsg);
      }
    },
    onSuccess: () => {
      qc.invalidateQueries({ queryKey: ["listUser"] });
    }
  });



  // S·ª≠a user
  const editMutation = useMutation({
    mutationFn: async (values) => {
      try {
        const payload = {
          taiKhoan: values.taiKhoan,
          matKhau: values.matKhau,
          email: values.email,
          soDT: values.soDT,
          hoTen: values.hoTen,
          maLoaiNguoiDung: values.maLoaiNguoiDung,
          maNhom: values.maNhom || "GP00" // Th√™m m√£ nh√≥m m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥
        };
        const res = await userService.editUser(payload);
        notyf.success("C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng");
        return res;
      } catch (error) {
        const errMsg = error.response?.data?.content || "C√≥ l·ªói x·∫£y ra!";
        notyf.error(errMsg);
        throw error; // N√©m l·ªói ƒë·ªÉ mutation x·ª≠ l√Ω th·∫•t b·∫°i
      }
    },
    onSuccess: () => {
      qc.invalidateQueries({ queryKey: ["listUser"] }); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch
      setIsModalOpen(false); // ƒê√≥ng modal
      form.resetFields(); // Reset form
    }
  });

  const listUser = data?.data?.content || [];

  const columns = [
    { title: "Email", dataIndex: "email", key: "email" },
    { title: "H·ªç T√™n", dataIndex: "hoTen", key: "hoTen" },
    {
      title: "M√£ Lo·∫°i Ng∆∞·ªùi D√πng", dataIndex: "maLoaiNguoiDung", key: "maLoaiNguoiDung",
      render: (text) => (
        <Tag color={text === "QuanTri" ? "red" : "blue"}>{text}</Tag>
      )
    },
    { title: "T√†i Kho·∫£n", dataIndex: "taiKhoan", key: "taiKhoan" },
    { title: "M·∫≠t kh·∫©u", dataIndex: "matKhau", key: "matKhau" },
    { title: "S·ªë ƒëi·ªán tho·∫°i", dataIndex: "soDT", key: "soDT" },
    {
      title: "Thao t√°c",
      render: (_, record) => (
        <Space>
          <Button danger onClick={() => deleteMutation.mutate(record.taiKhoan)}>X√≥a</Button>
          <Button type="primary" onClick={() => {
            setIsEdit(true);
            setEditingUser(record);
            setIsModalOpen(true);
            form.setFieldsValue(record);
          }}>S·ª≠a</Button>
        </Space>
      )
    }
  ];

  const handleAddUser = () => {
    setIsEdit(false);
    setEditingUser(null);
    setIsModalOpen(true);
    form.resetFields();
  };

  const handleOk = () => {
    form.validateFields().then(values => {
      if (isEdit) {
        editMutation.mutate(values);
      } else {
        addMutation.mutate(values);
      }
    });
  };

  return (
    <div className='p-8 bg-gray-50 min-h-screen'>
      <h3 className='text-2xl font-bold mb-4 text-gray-800'>üë§ Qu·∫£n l√Ω ng∆∞·ªùi d√πng</h3>
      {/* <Button type="primary" onClick={handleAddUser} style={{ marginBottom: 16 }}>+ Th√™m ng∆∞·ªùi d√πng</Button> */}
      <Table
        columns={columns}
        dataSource={listUser}
        rowKey="taiKhoan"
        bordered
        pagination={{ pageSize: 5 }}
      />
      <Modal
        title={isEdit ? "‚úèÔ∏è S·ª≠a ng∆∞·ªùi d√πng" : "‚ûï Th√™m ng∆∞·ªùi d√πng"}
        open={isModalOpen}
        onOk={handleOk}
        onCancel={() => setIsModalOpen(false)}
        okText={isEdit ? "C·∫≠p nh·∫≠t" : "Th√™m"}
        cancelText="H·ªßy"
      >
        <Form form={form} layout="vertical">
          <Form.Item
            name="taiKhoan"
            label="T√†i kho·∫£n"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√†i kho·∫£n" }]}
          >
            <Input placeholder="Nh·∫≠p t√†i kho·∫£n" disabled={isEdit} />
          </Form.Item>
          <p className="text-xs text-gray-500 -mt-2 mb-2">Nh·∫≠p t√†i kho·∫£n ƒëƒÉng nh·∫≠p</p>

          <Form.Item
            name="matKhau"
            label="M·∫≠t kh·∫©u"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u" }]}
          >
            <Input.Password placeholder="Nh·∫≠p m·∫≠t kh·∫©u" />
          </Form.Item>
          <p className="text-xs text-gray-500 -mt-2 mb-2">M·∫≠t kh·∫©u √≠t nh·∫•t 6 k√Ω t·ª±</p>

          <Form.Item
            name="email"
            label="Email"
            rules={[{ required: true, type: "email", message: "Vui l√≤ng nh·∫≠p email h·ª£p l·ªá" }]}
          >
            <Input placeholder="example@gmail.com" />
          </Form.Item>
          <p className="text-xs text-gray-500 -mt-2 mb-2">Nh·∫≠p email h·ª£p l·ªá (v√≠ d·ª•: abc@gmail.com)</p>

          <Form.Item
            name="soDT"
            label="S·ªë ƒëi·ªán tho·∫°i"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" }]}
          >
            <Input placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" />
          </Form.Item>
          <p className="text-xs text-gray-500 -mt-2 mb-2">Ch·ªâ nh·∫≠p s·ªë, kh√¥ng ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát</p>

          <Form.Item
            name="hoTen"
            label="H·ªç t√™n"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p h·ªç t√™n" }]}
          >
            <Input placeholder="Nh·∫≠p h·ªç t√™n" />
          </Form.Item>
          <p className="text-xs text-gray-500 -mt-2 mb-2">Nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç v√† t√™n</p>

          <Form.Item
            name="maLoaiNguoiDung"
            label="M√£ lo·∫°i ng∆∞·ªùi d√πng"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m√£ lo·∫°i ng∆∞·ªùi d√πng" }]}
          >
            <Input placeholder="QuanTri / KhachHang" />
          </Form.Item>
          <p className="text-xs text-gray-500 -mt-2">Ch·ªçn lo·∫°i: QuanTri ho·∫∑c KhachHang</p>

          <Form.Item
            name="maNhom"
            label="M√£ nh√≥m"
            rules={[{ required: false }]}
          >
            <Input placeholder="Nh·∫≠p m√£ nh√≥m n·∫øu c·∫ßn" />
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
}

export default AdminHomePage;
